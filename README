The files ML_SP_* contain a proof of type soundness for structural
polymorphism based on local constraints [1], together with soundness
and principality of the type inference algorithm.
  Metatheory_SP: new generic lemmas used in developments
  Cardinal: lemmas about finite set cardinals
  ML_SP_Definitions: basic definitions
  ML_SP_Infrastructure: structural lemmas on kinds and types
  ML_SP_Soundness: lemmas on derivations and proof of type soundness
  ML_SP_Eval: proof of type soundness for a stack-based evaluator
  ML_SP_Rename: renaming lemmas, and Gc elimination
  ML_SP_Unify: soundness and completeness of unification
  ML_SP_Inference: soundness and principality of type inference
  ML_SP_Domain: instantiation of all the above proofs to polymorphic variants

I started from a proof of type soundness for coer ML by Arthur
Chargueraud, which accompanied "Engineering formal metatheory" [2].
The library files (Lib_* and Metatheory*) are almost untouched.
The first 3 files (Definitions, Infrastructure and Soundness) were
heavily modified, and contain completely new properties, like
elimination of kind_gc.
Eval, Unify, Inference and Domain are completely new.

All the above development were checked with coq 8.2.
You can compile them with "sh build.sh"

You can also play with the type checker. It does not work inside Coq
at this point (Qed in place of Defined somewhere?), but you should
execute Extraction.v, compile the resulting typinf.{mli,ml}, and look
at use_typinf.ml for how to use it (it contains a number of petty
printers and conversion functions that make things easier).

Here are all the steps:

$ sh build.sh
$ coqc Extraction.v
$ ocamlc -c typinf.mli
$ ocamlc -c typinf.ml
$ ocaml
        Objective Caml version ...
# #use "use_typinf.ml";;


[1] Jacques Garrigue: Simple Type Inference for Structural Polymorphism.
    FOOL 9, Portland, Oregon, January 2002.
    http://www.math.nagoya-u.ac.jp/~garrigue/papers/#strucpoly

[2] Brian Aydemir, Arthur Chargueraud, Benjamin C. Pierce, Randy Pollack
    and Stephanie Weirich: Engineering Formal Metatheory. POPL'08.
    http://www.chargueraud.org/arthur/research/2007/binders/
